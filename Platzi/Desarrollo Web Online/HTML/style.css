*{
    box-sizing: border-box;
}

body {
    font-family: 'Source Sans Pro', sans-serif, Arial;
}

h1,
h2,
h3,
h4,
h5,
h6{
    font-family: 'Fjalla One', sans-serif;
    font-weight: normal;
    /* font-style: italic; */
}

h1{
    font-size: 40px;
    line-height: 1.5em;
    letter-spacing: -.2px;
    color: white;
    margin: 0;
}

h1 strong{
    /* color azul, con algo de "celeste" */
    color: #025fff;
}

.hero{
    height: 310px;

    background-image: url('./images/piscina.jpg');

    background-size: 700px 100%;

    background-repeat: no-repeat;

    background-position-x: right;

    background-color: #060606;

    /* Las siguientes 2 propiedades pondrán más estatico y "juntado" nuestro ".hero" */

    display: flex;

    align-items: center;
}

.project{
    border: 1px solid gray;
    border-radius: 10px;

    display: flex;
}

.project-details{
    width: 500px;
    /* display: inline-block; */
}

.project-image{
    width: 500px;
    /* display: inline-block; */
}

.header{
    padding-top: 0.1px;
    background-color: #060606;
    color: white;
    display: flex;
    height: 120px;
    align-items: center;
    justify-content: space-between;
}

ol,
ul{
    margin: 0px 15px 0px 0px;
    padding: 0;
    list-style: none;
    /* para que no tengan estilos ni formatos las listas */
}

figure{
    margin: 5px 10px 5px 15px;
    /* "figure" por defecto viene con margenes, acá los estamos definiendo manualmente */
}

.logo{
    text-align: center;
}

.header a{
    color: white;
    text-decoration: none;
}

.menu{
    height: inherit;
}

.header ol{
    display: flex;
    height: inherit;
    /* Va a heredar el "height" del ".menu", su elemento padre ("inherit" sólo funciona entre padres e hijos directos) */
}

.header ol li{
    height: inherit;
}

.header a{
    display: flex;
    align-items: center;
    height: inherit;
    padding: 0 10px;

    /* para que el enlace tenga acceso desde todo su alto (no solamente sobre la literalidad de su texto nada más, sino sobre todo su espacio disponible en términos de altura), hay que asignarle el "alto" directamente a él; es decir, al elemento "a" */
}

.flexbox{
    display: flex;
    flex-wrap: wrap;
}

.box{
    width: 50px;
    height: 50px;
    margin: 5px;
    border: 1px solid red;

    flex-shrink: 0;
}

.footer{
    background-color: #060606;
    color: white;

    display: flex;
    align-items: center;

    /* el selector ".footer", por medio de "display: flex;" está afectando directamente sobre todas las divisiones "div" que contiene; de tal manera que, todos esos sub-elementos "div" se acoplen de la manera más estatica y mejor ajustada posible sobre todo el ".footer".  
    */

    justify-content: space-between;
}

.footer img{
    vertical-align: middle;

    /* Cuando tienes un texto (un "div" 1) y lo mezclas, por ejemplo, con otros tipos de elementos como contenido embebido; en este caso, una imagen (un "div" 2), tú puedes preferir el alineado, de la imagen que tienes, dentro de esa disposición vertical (la del texto); entonces, para eso, se llama la propiedad "vertical-align" sobre el elemento al que le deseas copiar su alineado vertical; en este caso, como ya lo dijimos, sobre nuestra imagen actual. 

    "vertical-align" puede asumir varios valores: "top", "bottom", "text-bottom", etc. Puede probarlos en tiempo real para percibir sus diferencias visuales.
    
    Tenga en cuenta que ambos elementos, texto e imagen, son "div" independientes; pero que hacen parte, y son hijos directos, de un mismo selector: ".footer". */
}

.footer a{
    color: white;
}