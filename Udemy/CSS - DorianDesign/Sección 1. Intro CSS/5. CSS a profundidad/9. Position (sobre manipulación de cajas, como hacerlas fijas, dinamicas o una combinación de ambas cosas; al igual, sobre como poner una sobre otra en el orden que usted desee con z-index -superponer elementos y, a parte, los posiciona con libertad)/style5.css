/*
    El "stacking context", o el contexto de apilamiento, es el espacio donde nuestros elementos se van a ir apilando para que unos queden por detrás y otros por delante.

    El orden del stacking context es (de mayor relevancia a menor): 
        Elementos posicionados con un z-index de 1 ó más.

        Elementos posicionados sin z-index (o "z-index: auto")

        Elementos no posicionados.

        Elementos con "z-index" negativo.
        */

    *{
        box-sizing: border-box;
    }

    /* body{
        margin: 0;
        background-color: #333;
        color:#fff;
    }

    .container{
        width: 200px;
        height: 200px;
        background-color: #555;
        position: relative;
    } */

    .box{
        width: 100px;
        height: 100px;
        text-align: center;
        color: #333;
    }

    .box-1{
        background-color: lightcoral;
        position: relative;
        z-index: 1;
    }

    .box-2{
        background-color: lightgreen;
        margin-top: -50px;
    }

    .box-3{
        background-color: lightseagreen;
       
    }

    .container{
        background-color: mediumslateblue;
        margin-top: -50px;

        /* Si se da cuenta, ".container", con "margin-top: -50px", se posiciona sobre (y tapa) el selector ".box-1"; esto es porque, en el HTML, la clase "container" está por delante (viene después) de la clase ".box-1"; sin embargo, si ahora mismo cualquiera de los dos logra "posicionarse" con "position", sólo uno de ellos, ese cubrirá al otro. 
        
        Si por ejemplo "posicionamos" a ".box-1", ".box-1" ahora cubriría a ".container": esto es por el orden lógico que sigue "stacking context". 
        
        Cualquier elemento "posicionado" se interpondrá sobre uno que no; esto, incluso, sin importar en qué orden fueron escritos dentro de HTML.
        */


        /* Ahora, si de repente se me da por posicionar esta vez a este selector ".container", de nuevo este selector se interpondrá sobre ".box-1". Esto pasa porque, en términos de "stacking context", quedarían ambos elementos en condiciones iguales; y, en ese caso, de nuevo tocaría revisar qué elemento está por delante del otro, entre los dos comparados, en el DOM del HTML. Como bien sabe, "container" está por delante de "box-1"; en consecuencia, será el "container" quién "opace" a "box-1".
        
        Veamos. */

        position: relative;

        /* Y si ahora ya estando ambos selectores posicionados, quiero que de nuevo ".box-1" se sobreponga por encima de ".container", ¿qué debo hacer?
        
        Ahí sí debe hacer uso del recurso de la propiedad "z-index" y darle un valor positivo. 
        */
    }

    .title{
        margin: 0;
        background-color: #ccc;
        position: relative;
        z-index: 10;
        opacity: 0.75;

    }

    .text{
        margin: 0;
        margin-top: -40px;
        position: relative;
        opacity: 0.75;
    }

    /* La propiedad "opacity" le permite opacar, mucho o poco, su elemento: le permite establecer cierto grado de transparencia en él. Trate de usar siempre este recurso, directamente, sobre el selector que en verdad lo ocupará. Directamente en él, no en elementos "padres" a él.

    Si definimos "opacity" con un valor de "1" no pasa nada, se vería todo igual. Sin embargo, en la medida que vayamos bajando el valor númerico después de 1, se le empezará a notar mayor transparencia al selector en cuestión. Los valores que puede asumir van de "1" a "0" (contando también con los decimales de 0).
    */
