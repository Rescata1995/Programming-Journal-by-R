/*
    "z-index": Es la propiedad que nos permite ordenar los elementos superpuestos para controlar cuál se coloca por delante y cuál por detrás. Recuerdese que, por defecto, el contexto de apilamiento (Stackin context) es quién decide qué elemento se sobrepone, en un eventual caso, sobre otro. Es lo que decide qué se coloca por delante de qué.
    */

    *{
        box-sizing: border-box;
    }

    body{
        margin: 0;
        background-color: #333;
        color:#fff;
    }

    .container{
        width: 200px;
        height: 200px;
        background-color: #555;
        position: relative;
    }

    .box{
        width: 100px;
        height: 100px;
        text-align: center;
        color: #333;
    }

    .box-1{
        background-color: lightcoral;
        position: relative;
        left: 150px;

        z-index: -1;
        bottom: 18px;
    }

    .box-1-2{
        background-color: aquamarine;
        position: relative;
        left: 150px;
        
        z-index: -2;
        bottom: 25px;
    }

    /* En los anteriores selectores se demostró cuál es el tratamiento de "z-index" en elementos que son "padres" e "hijos". */

    .box-2{
        background-color: lightgreen;
        position: relative;
        top: 50px;

        /* Inicialmente, por defecto, lo que ocurre con las dos últimas propiedades definidas, es que la caja 2 (.box-2) se coloque por encima de la caja 3 (.box-3) y eso es porque en el HTML ".box2" aparece por delante que ".box3" y lo hemos "posicionado" (idealmente con "relative"); sin embargo, esto puede variar si le damos una "posición" también a ".box-3". Si le definimos "position" a ".box3", tendremos que ".box-3" se sobrepondrá sobre ".box-2".

        Es decir, si los dos elementos que están entrando en conflicto se "posicionan"; eventualmente, el último elemento declarado en HTML (en este caso, ".box-3") se interpondrá sobre el primero (es decir, ".box-2").

        Si no queremos que eso suceda, es decir, ir en contra de lo que dicta "el contexto de apilamiento",... es esto lo que precisamente se puede manipular con la propiedad "z-index": al declararla sobre el elemento posicionado de nuestro interés que desea que se sobreponga sobre otro.

        Pero recuerde, antes de definir la propiedad "z-index" sobre el elemento (en este caso, caja) de su interés, debe "posicionarlo". Hagamos entonces que ".box-2" vuelva a tomar su lugar y se interponga sobre ".box-3" de nuevo.
        */

        z-index: 1;

        /* Ahora, si no le pasamos un valor a "z-index"; por defecto, "z-index" asumirá el valor de "auto" (incluso aunque no lo declare manualmente). Es decir, se le estaría diciendo al navegador que calcule automaticamente cuál tiene que ser su orden de apilamiento.
        */
    }

    .box-3{
        background-color: lightseagreen;
        position: relative;

        /* Ahora bien, si la discusión fuera organizar el orden de apilamiento de varios elementos (o cajas) bajo una secuencia determinada manualmente por nosotros mismos; tendríamos que convocar la propiedad "z-index" sobre cada uno de los elementos en cuestión. La lógica es la siguiente: el elemento que se va a interponer sobre otro es quién tenga un valor númerico superior entre los dos en "z-index" (o entre los totales al ser comparados).

        Por ejemplo, si definimos a ".box-2" con un "z-index: 1" y queremos que de nuevo ".box-3" se interponga sobre ".box-2"; deberiamos entonces darle un valor numérico a ".box-3", en su "z-index", superior a "1".
        Tal que así:
        */

        z-index: 2;

        /* Ahora, lo ideal sería no utilizar números consecutivos en el "z-index" (nosotros lo hicimos por modelación, pero no es considerada una buena práctica). Tome valores númericos de 10 en 10.
        */

        /* IMPORTANTE: Ahora bien, este es el tratamiento para elementos completamente independientes, donde ninguno contiene al otro; sin embargo, entre elementos "padres" e "hijos" el tratamiendo de la propiedad "z-index" varia. 

        El elemento contenedor no puede ponerse por encima de su "hijo" (por más que lo intente con la propiedad "z-index"), mas sí, el "hijo" sí puede colocarse por detras de su "padre" al "posicionarlo" con "relative" y darle un "z-index" con valor númerico NEGATIVO (ojo a esto). Y tenga cuidado, recuerde, no le declare un "z-index" al padre ".container"; pues, se rompería el código.

        Veamos esto último con el elemento ".container" que está conteniendo a ".box-1".

        Ahora, la lógica de apilamiento acá funciona igual, sólo que puede confundir. El elemento con valor numérico menor es el que siempre estará relegado al fondo o va a estar por debajo de todos; pero, en numeros negativos, el menor es el "mayor" con signo negativo. En resumen, en cualquiera de los dos casos, lo que hace el navegador es dibujar el que tiene el "z-index" más grande por encima. 
        
        Evidencie la aplicación de la anterior teoria en la caja ".box-1-2" sobre la caja ".box-1" y posteriormente el ".container".
        */
    }

