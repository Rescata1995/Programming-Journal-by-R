/*  
    "relative": El elemento mantendrá su posición y medidas en el flujo de renderizado y también mantendrá su espacio reservado. Si lo movemos lo hará usando su posición en HTML como punto de referencia.
    */

    *{
        box-sizing: border-box;
    }

    body{
        margin: 0;
        background-color: #333;
    }

    .box{
        text-align: center;
        /* Esta propiedad esta considerando solamente la palabra inicial de todos los elementos que en "class" empiecen con el nombre de "box"; aplicando esta propiedad para todos los que empiecen con "box", tanto para: "box box-1", "box box-2", "box box-3", "box box-4", etc.  */
    }

    .box-1{
        width: 100px;
        height: 100px;
        background-color: lightcoral;
        position: relative;
        left: 100px;
        top: 50px;

        /* La propiedad "left" mueve nuestro elemento ".box-1" 100px a la derecha; significando este valor que, realmente, lo que deja es un espacio vacio de 100px a la izquierda sobre la ubicación inicial del selector ".box-1". Sin embargo, aún así, el navegador encuentra que sigue habiendo un espacio reservado para dicho elemento ".box-1" en su anterior ubicación inicial (previo al movimiento de 100px a la derecha). Posteriormente, desplazamos nuestra caja ".box-1" 50px hacia bajo con la propiedad "top".
    
        */
    }

    .box-2{
        width: 100px;
        height: 100px;
        background-color: lightgreen;
        position: relative;
        top: 0px;
        left: 100px;

        /* Ahora bien, un elemento (en este caso estamos trabajando con "cajas") puede sobreponerse sobre otro; de tal manera que, cualquier desplazamiento en pixeles que le demos a uno, me lleve a cubrir el espacio,  parcial o totalmente, de otro elemento. Esto es lo que sucede con el llamado "contexto de apilamiento" (Stackin context); que, por defecto, cuando 2 elementos se cruzan entre sí, por un mismo espacio, el elemento que cubrirá al otro será el elemento que haya sido escrito en HTML de último, entre los dos (por defecto es así).

        Si se da cuenta la caja de color verde se superpone sobre la caja de color coral (la tapa parcialmente, en un 50%); esto es así, porque, la caja de color verde fue escrita en HTML justamente después de la caja de color coral.

        Las cajas que se colocan de primero, en HTML, son la base de ese contexto de apilamiento (o de esa "escalera" de apilamiento). Luego seguirían las otras.
        */

        /* Ahora, vamos a darle un aspecto de "circulo" a nuestra último elemento ".box-2" con la propiedad "border-radius". Esto, aunque en apariencia será un "circulo", para el navegador seguirá siendo un cuadro de 100px de ancho y de alto; pues, seguirá respetando los espacios de sus esquinas; dichas esquinas, aunque ya no se vean, por haber sido eliminadas aparentemente al darle un aspecto circular a dicho elemento; repetimos, para el navegador seguirá siendo un cuadro de 100px de ancho y de alto; y, en consecuencia, respetará sus esquinas; es decir, la esquina superior izquierda siempre va a ser, por defecto, el punto de referencia (por más que no se vean las esquinas, por más que le cambiemos la forma a la figura, en HTML siempre se hablará de "cajas"). */

        border-radius: 50px;
    }


/* 
    Ahora vamos a estudiar otro valor para la propiedad "position": "absolute".

    "absolute": Cuando lo declaramos... el elemento va a perder sus medidas y su espacio reservado. Si posteriormente lo movemos (con las propiedades consecuentes: "top", "left", "right" o "bottom") va a usar al elemento contenedor (que le contiene) como referencia, sin importar si es su elemento "padre directo" o no: no se moverá por encima de él o por fuera de sus límites; esto sólo si, además, está este elemento contenedor posicionado también. Si ningun elemento le contiene (o si un elemento le contiene, pero no tiene declarada la propiedad "position" con ninguno de sus valores posibles: "Relative", "Absolute", "Fixed" & "Sticky"), indudablemente, su contenedor será entonces la propia hoja de marcado HTML que se refleja en el navegador; es decir, el mismo "body"). 

    La anterior descripción, en un primer vistazo, no hace mucho sentido; mas, vamos por parte: primero vamos a evaluar esto: "el elemento va a perder sus medidas y su espacio reservado".
*/

.box-3{
    background-color: lightcoral;
    position: absolute;

    /* Literalmente, con "absolute" se pierde sus medidas y su espacio reservado (me refiero a este selector "box-3", el cuál la está ocupando). Vea la diferencia entre "box-4" & "box-3" en el navegador y se dará cuenta que "box-3" perdio sus medidas; además, cualquier elemento podría situarse sobre el mismo espacio donde se encuentra, dentro del navegador, "box-3",... perdiendo así también su espacio reservado (tal como lo está ocupando parcialmente nuestro "footer").
    */  

    /* En todo caso, si luego de declarar "position" con "absolute", le damos medidas por nuestra cuenta al selector (por un ejemplo, con un "height" & un "width"),... él las va a recibir; sin embargo, el espacio reservado seguirá perdido; otros elementos, si es ese el caso, seguirán irrespetando el espacio donde está situado este selector en cuestión: la razón es que, para el flujo de renderizado de HTML, no hay absolutamente nada en ese espacio. Veamos esto... se dará cuenta que el "footer" seguirá irrespetando el espacio del "box-3"; incluso, aunque éste, ahora tenga medidas. */

    width: 100px;
    height: 100px;
}

.box-4{
    background-color: lightgreen;
    position: absolute;

    width: 100px;
    height: 100px;

    /* Ahora probemos esta parte con "box-4":... "Si posteriormente lo movemos (con las propiedades consecuentes: "top", "left", "right" o "bottom") va a usar al elemento contenedor (que le contiene) como referencia, sin importar si es su elemento "padre directo" o no: no se moverá por encima de él o por fuera de sus límites; esto sólo si, además, está este elemento contenedor posicionado también. Si ningun elemento le contiene (o si un elemento le contiene, pero no tiene declarada la propiedad "position" con ninguno de sus valores posibles: "Relative", "Absolute", "Fixed" & "Sticky"), indudablemente, su contenedor será entonces la propia hoja de marcado HTML que se refleja en el navegador; es decir, el mismo "body")" Veamos. */

    bottom: 0;
    right: 0;
}

/* Es muy importante la dinámica de "posicionar un elemento respecto a otro (un contenedor)",... da igual si ese elemento contenedor se mueve; pues, todo lo que esté posicionado con respecto a él, se va a mover con él. 

Dato curioso extra: Usted se recuerda que a un elemento de línea, inicialmente, no puede darle medidas; tales como: "width" y/o "height"; pues bien, cuando nosotros le damos "position: absolute" a un elemento, lo que estamos haciendo es generar un contexto de bloque automaticamente para poder darle medidas y que el navegador coloque dicho elemento; por lo tanto, si estás "posicionando" elementos de línea, quiero que sepas que no necesitas hacer uso de la propiedad-valor "display: inline-block" o "display: block" para poder darles medidas con: "width" y/o "height", por ejemplo.

*/