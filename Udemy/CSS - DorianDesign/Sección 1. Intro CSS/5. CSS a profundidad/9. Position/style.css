/*  
    "relative": El elemento mantendrá su posición y medidas en el flujo de renderizado y también mantendrá su espacio reservado. Si lo movemos lo hará usando su posición en HTML como punto de referencia.
    */

    *{
        box-sizing: border-box;
    }

    body{
        margin: 0;
        background-color: #333;
    }

    .box{
        width: 100px;
        height: 100px;
    }

    .box-1{
        background-color: lightcoral;
        position: relative;
        left: 100px;
        top: 100px;

        /* La propiedad "left" mueve nuestro elemento ".box-1" 100px a la derecha; significando este valor que, realmente, lo que deja es un espacio vacio de 100px a la izquierda sobre la ubicación inicial del selector ".box-1". Sin embargo, aún así, el navegador encuentra que sigue habiendo un espacio reservado para dicho elemento ".box-1" en su anterior ubicación inicial (previo al movimiento de 100px a la derecha). Posteriormente, desplazamos nuestra caja ".box-1" 100px hacia bajo con la propiedad "top".
    
        */
    }

    .box-2{
        background-color: lightgreen;
        position: relative;
        top: 50px;
        left: 100px;

        /* Ahora bien, un elemento (en este caso estamos trabajando con "cajas") puede sobreponerse sobre otro; de tal manera que, cualquier desplazamiento en pixeles que le demos a uno, me lleve a cubrir el espacio,  parcial o totalmente, de otro elemento. Esto es lo que sucede con el llamado "contexto de apilamiento" (Stackin context); que, por defecto, cuando 2 elementos se cruzan entre sí, por un mismo espacio, el elemento que cubrirá al otro será el elemento que haya sido escrito en HTML de último, entre los dos (por defecto es así).

        Si se da cuenta la caja de color verde se superpone sobre la caja de color coral (la tapa parcialmente, en un 50%); esto es así, porque, la caja de color verde fue escrita en HTML justamente después de la caja de color coral.

        Las cajas que se colocan de primero, en HTML, son la base de ese contexto de apilamiento (o de esa "escalera" de apilamiento). Luego seguirían las otras.
        */

        /* Ahora, vamos a darle un aspecto de "circulo" a nuestra último elemento ".box-2" con la propiedad "border-radius". Esto, aunque en apariencia será un "circulo", para el navegador seguirá siendo un cuadro de 100px de ancho y de alto; pues, seguirá respetando los espacios de sus esquinas; dichas esquinas, aunque ya no se vean, por haber sido eliminadas aparentemente al darle un aspecto circular a dicho elemento; repetimos, para el navegador seguirá siendo un cuadro de 100px de ancho y de alto; y, en consecuencia, respetará sus esquinas; es decir, la esquina superior izquierda siempre va a ser, por defecto, el punto de referencia (por más que no se vean las esquinas, por más que le cambiemos la forma a la figura, en HTML siempre se hablará de "cajas"). */

        border-radius: 50px;
    }
