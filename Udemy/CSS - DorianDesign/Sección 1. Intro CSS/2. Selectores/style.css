/* SELECTORES: Simples y Compuestos */

/* 
    Selectores Simples.

        Selectores elementales, son los más básicos: se utilizan en casos muy concretos. Tales como:

            Selector Universal: Llevan un Asterisco (*) y consisten en seleccionar absolutamente todo; es decir, aplican los valores definidos en una propiedad sobre todo el documento HTML (sobre todos sus elementos). No es bueno abusar de él.
           
            Selector de tipo o etiqueta: Llevan el nombre de la etiqueta en cuestión y consisten en aplicar el valor definido en una propiedad sobre un elemento en especifico.

        Selectores de atributo (los atributos HTML) o clase: son los más usados porque se aplican sobre elementos con especificaciones (y no sobre la totalidad del elemento en sí).

            Selector id (id del elemento): para ser manipulados en CSS, se deben inicializar con un numeral (#) y, posteriormente, colocar el valor del "id" en cuestión. No es recomendable dar estilos con "id", porque sólo se puede aplicar un mismo nombre de "id" sobre un sólo elemento; es decir, no se puede colocar el mismo identificador (nombre de "id") sobre varios elementos. En todo el documento HTML sólo existiran identificadores propios para un elemento; y no pueden ser repetidos, los "id", en caso que queramos manipular varios elementos, en su conjunto, de una misma manera por medio de la asignación de un mismo identificador. Para lo anterior, sirven las "clases".

            Selector class (clase del elemento): para ser manipulados en CSS, se deben inicializar con un punto  (.) y, posteriormente, colocar el valor del "class" en cuestión (el de su interés). Esto es lo más recomendado para dar estilos: definir sus elementos con clases. Puede poner cuantas "class" desees sobre un mismo elemento (u otro); y tener la posibilidad, así, de manipular cada etiqueta en particular si así lo desea. Otra gran ventaja es que... podemos poner la misma clase, incluso, sobre elementos del documento HTML diferentes; y aplicar, desde CSS, las mismas caracteristicas de estilo sobre los dos elementos diferentes relacionados en una misma clase.

        Otros atributos: Es sólo otra forma de dar estilos a los atributos. Son representados con estas dos llaves [], dentro de las llaves se coloca el atributo (de alguna etiqueta de HTML) sobre el que queramos manipular para darle estilo con CSS, así: [atributo]. Por ejemplo, [href]: esto le daría estilos a cada una de las etiquetas que contengan el atributo "href", sin importar si esas etiquetas sean de un elemento diferente. 
            
            De hecho, podríamos tambien especificar todavía más sobre qué elemento en concreto deseamos darle estilo (hacer más filtros) al no sólo dentro de las llaves pasarle un atributo; sino también, pasarle el valor de interés definido para dicho atributo en cuestión, tal que así: [atributo= "valor"].

            Por ahora, tenemos esto: [atributo] & [atributo= "valor"]  
            
            Tenemos también [atributo^="valor"], el acento (^) nos permite aplicar un estilo particular, definido en CSS, para todos aquellos atributos que comienzan siendo definidos por una misma palabra como "valor" (siendo el mismo atributo también para ellos). Es decir, el acento lo que hace es aplicarle el mismo estilo CSS a todos los atributos que sean definidos, en principio, por el mismo valor en HTML (por decir algo, la primera palabra con la que es definida el valor del atributo -siendo el atributo también igual para los casos de estudio). Este recurso se diferencia de [atributo= "valor"]; porque, en el anterior modelo, todo lo que es definido como "valor" debe ser completamente igual en todos los casos; mas no es así en nuestro caso de estudio actual, sólo es necesario encontrar similitudes en algúna parte de todo lo que sea definido como "valor" (haciendo el análisis desde el inicio).

            También está el recurso [atributo*="valor"], este recurso hace lo mismo que el anterior; solo que, la palabra identificada en "valor" ("valor" de algún atributo) no necesariamente debe ser la primera, sino cualquiera de todo el "valor" definido.

            Adicionalmente, tenemos el siguiente recurso: [atributo$="valor"], es exactamente todo lo contrario al recurso [atributo^="valor"]; es decir, este recurso, el del caso de estudio actual, considera sólo la última palabra de todo el "valor" definido para el atributo en cuestión (no la primera).


    Selectores Compuestos
        Selectores Agrupados
        Selectores Combinadores: Selector descendiente, Selector de hermano siguiente (+), Selector de hermanos siguientes (~).
        Pseudoclases - Pseudoelementos   
        */

       
/* 1. Selectores simples:
    */

/* Ejemplo de un selector universal */
*{
    background-color: lightcoral;
}

/* Ejemplo de un selector de tipo o etiqueta */

h1{
    background-color: lightcyan;
}

/* Otros ejemplos */

p{
    background-color: lightgreen;
}

ul{
    background-color: red;
}

li{
    background-color: lime;
}

/* Ejemplo con selector id */

#title{
    background-color: lightslategrey;
}

/* Ejemplo con selector class */

.title2{
    background-color: mediumblue;
}

/* Ejemplo de "Otros atributos", de tipo: [atributo] */

[href]{
    background-color: lightseagreen;
}

/* Ejemplo de "Otros atributos", de tipo: [atributo= "valor"] */

[href= "es"]{
    background-color: lightslategray;

    /* En este formato se toma todo el valor */
}

/* Ejemplo de "Otros atributos", de tipo: [atributo^= "valor"] */

[href^= "color"]{
    background-color: magenta;

    /* En este formato se selecciona "el principio" del valor del atributo */
}

/* Ejemplo de "Otros atributos", de tipo: [atributo*= "valor"] */

[href*= ",unbeso"]{
    background-color: mediumslateblue;

    /* En este formato se selecciona "el final" del valor del atributo */
}

/* Ejemplo de "Otros atributos", de tipo: [atributo$= "valor"] */

[href$= "marico"]{
    background-color: olive;

    /* En este formato se selecciona "un pedazo" del valor del atributo */
}

/* Todos estos recursos son válidos para cualquier atributo de HTML */

/* ----------------------------------------------------------------------------*/

/* Selectores compuestos: 
    */

/* Ejemplo de un "Selector agrupado": se recurre a este recurso cuando queremos aplicar las mismas caracteristiscas de estilo CSS sobre dos o más de dos atributos; pueden ser, incluso, independientes entre sí... De tal manera que se ahorre código. Veamos esto: */

.title2,
[href*= "o, m"],
[href="color-blue"]{
    background-color: firebrick;
}

/* Ahora hablaremos de la clasificación de los selectores combinadores, el primero de todos ellos es: "Selector descendiente". Con el "selector descendiente" podemos seleccionar una etiqueta, de HTML, que esté dentro de otra; y, así, aplicar todos los efectos de estilo sobre todos los elementos que se identifiquen con esa misma etiqueta seleccionada; pero, fundamentalmente, sólo se afectaría sobre todos los elementos que estén dentro de una etiqueta "madre" (es decir, la otra etiqueta que contiene todos los elementos de una etiqueta particular: la selección de sus "hijos").
Esa es la finalidad. 

Se trata de afectar sobre todos los elementos de una referencia o de una misma etiqueta; digamos, por ejemplo, sobre todos los "h1"; pero, serían sólo los "h1" que estén dentro de otro elemento o etiqueta especificada en sí; digamos, por ejemplo, se aplicarían los efectos de estilo sobre todos los "h1", pero sólo los que estén dentro de un "div". Todos esos "h1", dentro del "div", deben identificarse bajo un mismo valor definido con el atributo "class" (para que puedan, así, ser llamados dentro del "selector descendiente"). 

La dinamica sería así, siguiendo el mismo ejemplo con "div" y todos los "h1" que estén dentro de él (dentro de "div"): 
*/

div .los3mosqueteros{
    background-color: wheat;
}

/* Es preciso decir que uno puede hacer uso de esta herramienta más allá de un nivel de descendencia; es decir, en elementos que contienen otros elementos que contienen, finalmente, los elementos de una misma etiqueta a la cuál queremos afectar; sin embargo, no es una buena práctica hacer esto. Lo ideal sería no bajar a más de un nivel, pero igual mostraremos un ejemplo de lo que se comenta para que se ubique. 
*/

article div .los3mosqueteros{
    background-color: blueviolet;
}

/* Ahora, hablaremos de la otra clasificación de selectores combinadores: 1ro. "Selector de hermano siguiente". Primero definamos o aclaremos a qué hacemos referencia cuando hablamos de "hermanos"; los "hermanos", en HTML, son aquellas etiquetas o elementos que están en un mismo nivel de clasificación; es decir, donde ninguna de las dos etiquetas (o más de dos) contiene o es contenida por otra. En el caso en que un elemento o etiqueta esté dentro de otra, se le llama etiqueta "hijo"; y, por ejemplo, la etiqueta que la contiene, se le llama: "madre". Entonces, de lo que se trata "Selector de hermano siguiente" es de, por medio de un atributo "class" definido (en una etiqueta x), darle estilo a una etiqueta "hermana" de otra. Es decir, llamar el valor definido en el atributo "class" de una etiqueta; y, posteriormente, llamar a su etiqueta "hermana", por medio de un signo suma (+), que está inmediatamente después de ella (tienen que estar inmediatamente contiguos los elementos, al lado, para que funcione esto -y tiene que seleccionar luego el que está después, no antes, ojo con esto); usted puede llamar a la etiqueta "hermana" por medio de su propio nombre o, bien, por medio del valor definido que tenga en su atributo "class" también. Veamos esto en la práctica para que se entienda mejor.
*/

.hermano1 + .hermano2{
    background-color: red;
}

/* Ahora, si lo que se desea es seleccionar a todos los "hermanos" siguientes, que estén dentro de una misma etiqueta "madre" y por debajo de la etiqueta que convoca dicho "Selector de hermanos siguientes" por medio de su valor definido en "class"; todo es prácticamente igual, pero ahora tocaría hacer uso de "~". Lo otro, sobre el "hermano" que se quiere afectar, idealmente, lo debe mencionar por medio de su propia etiqueta y no, precisamente, por el valor que tenga definido en su atributo "class". Veamos un ejemplo. 
*/

.hermana1 ~ p{
    background-color: yellowgreen;
}

/* Ahora, el llamado de los "hermanos siguientes" también se puede dar por medio del valor definido en su atributo "class" (y no sólo por medio de la citación a etiquetas propiamente,... como aconteció con "p"). La dinámica funcionaría exactamente igual; sólo que, en este caso, el valor en los atributos "class" debe ser el mismo para todas las etiquetas que quieran ser afectadas. Veamos esto. 
 */

 .hermana1 ~ .hermana2{
     background-color: wheat;
 }

 /* Ahora, tenemos también en nuestro recurso de selectores, el "selector de hijo directo". Lo dicho, cuando nos referimos a una etiqueta "hija", queremos referirnos a una etiqueta que está inmediatamente contenida por otra; la cual, esa "otra", sería la etiqueta "madre". 
 Es preciso aclarar esto bien, no todas las etiquetas que están contenidas por otra se les llama etiquetas "hijas"; pueden haber, también, etiquetas "nietas"; es decir, que son etiquetas que están contenidas por otra; pero, esa "otra" (que sería la etiqueta "madre"), está contenida por otra etiqueta "madre" adicional. Dicho lo anterior, el recurso del "selector de hijo directo", sólo afecta (tal como su nombre lo dice) sobre las etiquetas "hijas", mas no sobre las "nietas". La dinámica lógica es igual; sólo que acá, para referirnos propiamente al recurso del "selector de hijo directo", usamos el simbolo del "mayor que" (>). Veamos esto.
*/

.abuela1 > p{
    background-color: indigo;
}

/* Si se da cuenta; la "p" del medio, que está dentro del "div" valorado en "class" como "madre1", es la única que no fue coloreada con morado (indigo); esto es así porque, dicha "p", realmente no es "hija" directa del div "abuela1"; es, más bien, "hija directa" del div "madre1".

Las "p" que hacen de "hija directa" también pueden ser llamadas, no desde su propia etiqueta "p" (como acabamos de evidenciar); sino, también, por medio de los valores que hayan sido definidos con el atributo "class" (y recuerde, dichos valores deben ser iguales para todas las etiquetas "p" que desee afectar).
*/