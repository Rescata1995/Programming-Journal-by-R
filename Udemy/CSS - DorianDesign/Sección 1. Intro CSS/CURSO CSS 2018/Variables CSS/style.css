:root{
    --color: red;

    /* Idealmente las variables deben estar definidas dentro de un selector (y en el selector de la pseudoclase ":root" si se quiere afectar sobre todo el DOM a priori con ellas) */

    /* Aquí hemos definido, como se debe, la creación de una variable en CSS que lleva por nombre: "color" y le hemos dado un valor de: "red". */

    --border: 2px solid black;

    /* Hemos creado una última variable con el nombre de "border" */
}

.paragraph{
    color: var(--color)

    /* Si se da cuenta, lo que hemos hecho, es pasarle la variable definida a una propiedad de CSS para que afecte sobre un selector seleccionado, en este caso el selector es: "paragraph"...
    
    Es de la anterior forma, tal como lo dicta su sintaxis, en la que se define una variable con un valor y luego es llamada dentro de un selector para que afecte sobre él mediante una propiedad. 
    
    Entonces, siendo más precisos, lo que ha pasado es que a los elementos con la clase "paragraph" les hemos pasado la propiedad "color" (que se encarga de darle un determinado color al "content" de un selector); el color que le hemos pasado a la propiedad "color" es el "color" que fue definido como variable inicialmente por nosotros mismos...
     De tal manera que, a las propiedades se les pasa como valor el nombre de las variables que hemos creado y, además, que queremos que afecten sobre ella (sobre la propiedad en sí); por ejemplo, el caso de: 

     "color: var(--color)".
     
     En consecuencia, la propiedad pasaría a ser definida entonces por el valor definido para la variable creada en cuestión (por extensión); para nuestro caso, qué valor tendría esta vez la variable creada con el nombre de "color"? R/ "red". 
     
     Dicho valor, desde la propia variable que la define, puede variar cuantas veces se desee; es decir, así como pudo ser "red", usted podría reemplazar dicho valor por "blue" o "green", por ejemplo. Pruebelo. */
}

/* Sin embargo, las variables también conservan ciertas cualidades de CSS de antaño como: "Herencia" & "Cascada"; y, además, como las variables pueden ser redefinidas o modificables posteriormente (por eso son "variables", porque pueden variar) también se ve que, si inicialmente la variable "color" fue definida con el valor "red", usted en un código ulterior podría volver a re-escribir su variable y cambiar su valor inicial: esto es lo que usted ya conoce como efecto "cascada" ...

"cuando dos reglas tienen la misma especificidad, se aplica la que aparece en último lugar en el CSS".

A pesar de lo anterior, hay veces en que usted desea variar ese valor inicial ("red") de la variable ("color") PERO para un selector en especifico (y no para todo el HTML); es decir, en un posterior código, variar la variable para un selector en particular de todo el DOM y, como mucho (como se espera), para los hijos directos que éste contenga (siendo el selector seleccionado un elemento "padre" y los elementos que contiene dicho selector sus "hijos"); de esta manera es que se ve reflejada, en la mayoria de los casos, la práctica de la cualidad o caracteristica de la "herencia"... Con la versatilidad de que no siempre el valor definido inicialmente para una variable deba variar para todos los elementos del HTML luego (en caso que haga cambios en el valor de ella), no; si usted desea, puede hacer variar el valor de la variable, pero (como ya se dijo) para unos elementos (selectores) en especifico (los de su elección). Pongamos en práctica todo en un sólo paso.
*/

.article{
    --color: blue;

    /* Si se da cuenta, por un tema de "cascada", ahora la variable "color" ya no es "red"; pues, se cumple esto: 

    "cuando dos reglas tienen la misma especificidad, se aplica la que aparece en último lugar en el CSS".

    Sin embargo, si se percata todavía más, el valor de la variable "color" no cambió para todos los elementos del DOM; pues, dese cuenta que la variación de la variable "color" sólo se dio sobre el selector "article" y "article" no contempla todo el HTML,...

    Quiere decir entonces que, como mucho (y aquí viene la influencia del concepto "herencia"), "article" como selector puede afectar es sobre sus elementos "hijos" que contenga (y reemplazar el valor de "red" por "blue" en la variable "color"), más nada.
    
    */
}

.check:checked + .box{
    --color: purple;

    /* Recuerde que ":checked" es una pseudoclase que trabaja con el tipo (type) de formulario "checkbox" ("checkbox" en esta ocasión recibe el nombre de la clase "check"). La pseudoclase "checked" tiene como función aplicar estilos sobre un selector vinculado, en este caso ".box", si el "botón" del tipo de formulario (type: "checkbox")recibe un click.
    
    Entonces, cada vez que se haga un click sobre el "checkbox", se pondrá de color "purple" el div "box". */
}

.box{
    width: 100px;
    height: 100px;
    background: var(--color);
    border: var(--border);
}

/* Las variables suelen ser muy útiles en el sentido de que se logra mucha eficiencia con ellas; es decir, en caso que varios elementos estén compartiendo la aplicación de una misma variable, si usted desea modificar para todos el valor de la misma, sólo es irse a los origenes de su declaración y hacer los respectivos cambios de valor en ella. Y listo! */