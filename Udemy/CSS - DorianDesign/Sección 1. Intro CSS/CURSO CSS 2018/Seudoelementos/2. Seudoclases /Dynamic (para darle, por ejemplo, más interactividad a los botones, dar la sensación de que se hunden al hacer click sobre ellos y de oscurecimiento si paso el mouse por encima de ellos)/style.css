.link-virgen:link{
    color: red;
}

.link-virgen:visited{
    color:green;
}

.link-usado:visited{
    color: blueviolet;
}

/* La seudoclase ":visited" si bien es útil su uso para motores de busqueda como "Chrome", por ejemplo, no es esteticamente bien vista dentro de un sitio web; no es una buena práctica, así que no se recomienda usar en ese caso. */

.link-usado:active,
.link-virgen:active{
    color: chartreuse;
    background-color: black;

    /* Por lo general su uso es bien extendido en "botones" para darle la sensación al usuario de que el botón "tiene su propia vida" e interactua; especialmente en los casos en los que se pretende asimilar que, en verdad, el botón está siendo "presionado" por un click (para dar la sensación de que se "unde")... 
    
    Ese efecto de que se "unde el botón", al dejar un click sostenido sobre dicho selector, y en contubernio con la pseudoclase ":active" en consecuencia, se logra por medio de la propiedad-valor: "transform:scale(.#)"

    donde el "#" significa un numero entero positivo cualquiera.
    "transform:scale(.#)" lo que hace realmente es reducir (o aumentar si se coloca el número sin el decimal que represental el ".") las dimensiones totales de un selector; en este caso, el selector tendría la forma de un "botón". 
    
    Algo para tener en cuenta: "transform:scale(1)" mantiene las dimensiones originales del selector, no varia (ni aumenta ni disminuye).
    
    Veamos cómo se ve todo esto gráficamente. 
    */
}

/* Vamos a crear primero el botón; que, como bien sabe, debe crearse por medio de un elemento de "enlance" tipo "a"; pues, recuerde bien, la pseudoclase ":active" sólo funciona en elementos "a". Como querrá reflejar un "botón" le será necesario que declare el elemento "a", que naturalmente es de tipo "línea", en al menos un elemento de línea que pueda recibir propiedades de un elemento de bloque; es decir, "display: inline-block".
*/

.buttom{
    text-decoration: none;
    display: inline-block;
    background-color: red;
    padding: .5em;
    border-radius: 10px;
    color: white;
}

.buttom:active{
    transform: scale(.9);
}

/* Así acabamos de simular el realismo de que "hacemos click". 
*/

/* Ahora, para continuar con la misma dinámica, queremos darle también estilos al "botón" cuando el mouse pase por encima de él (sin presionarlo), eso se lograría con la pseudoclase ":hover"; es decir, en términos generales, ":hover" lo que hace es darle estilos, a cualquier selector que le sea aplicado, toda vez que pasemos por encima de él con el mouse (sin hacer click con el mouse sobre el selector en cuestión, ojo, eso es lo que hace justamente ":active").  
*/

.buttom:hover{
    color: red;
    background-color: white;
    border: 1px solid;
    border-radius: 10px;
}

/* Ahora, vamos a evaluar la última pseudclase de las "Dynamic": ":focus".

":focus" lo que hace sobre el selector seleccionado es darle estilos (y mantenerlo fijo) toda vez que el último click de nuestro mouse haya sido sobre el selector en cuestión. Es decir, cuando hacemos "click" sobre el selector seleccionado, para ser afectado, significa que tiene el "foco" y se le aplicarán los estilos designados en ":focus" y se mantendrán así mientras no haya dado click en otro lugar del navegador posteriormente. Veamos un ejemplo de su aplicación sobre una caja de texto. 
*/

.input:focus{   
    border: 5px solid blue;
}

