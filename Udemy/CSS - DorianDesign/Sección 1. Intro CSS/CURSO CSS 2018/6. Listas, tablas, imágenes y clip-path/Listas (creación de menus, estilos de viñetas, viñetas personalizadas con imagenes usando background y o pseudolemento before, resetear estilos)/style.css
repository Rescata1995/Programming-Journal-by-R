/* 
Hay tres propiedades para las listas, se pueden aplicar al "padre" o a los elementos de la lista. 

    1ra propiedad. "life-style-type": Establece el estilo de viñeta. Posibles valores:

        disc (viene por defecto)

        circle (circunferencia)

        square (cuadrado)

        decimal (vuelve las listas "ordenadas", les pone números)

        decimal-leading-zero (vuelve las listas "ordenadas"; pero, esta vez, guardan un 0 por delante)

        Estilos con letras:

        lower-roman (números romanos en minusculas)

        upper-roman (números romanos en mayusculas)

        lower-greek

        lower-latin (el abecedario en minusculas)

        upper-latin (el abecedario en mayusculas)

        armenian (alfabeto armenio)

        georgian (alfabeto georgiano)

        lower-alpha (lo mismo que "lower-latin")

        upper-alpha (lo mismo que "upper-latin")

    2da propiedad. "life-style-image": Pone una imagen en lugar de la viñeta, no se suele utilizar porque hay formas mucho más eficientes de hacerlo. Posible valor:

        url(ruta-imagen)

    Por lo general suele ser una mala práctica importar uma imagen, con esta propiedad, para ser usada como viñeta; esto debido a que, la imagen por defecto que ha sido usada como viñeta, se importa con sus propias medidas en términos de dimensiones y no con unas medidas "ideales" propias a emular una viñeta (y no se puede cambiar).

    Soluciones o alternativas a esto? R/ Dos (2) formas: 

    1ra. Podemos hacer uso de un pseudoelemento "::before" sobre cada item; en este caso, sobre el selector ".list_item".

    2da. Podemos hacer uso de un background sobre cada item; en este caso, sobre el selector ".list_item".

    Apliquemos la 1ra forma.
*/

.list_item::before{
    content: '';
    /* para que se dibuje */

    display: inline-block;
    /* para poder asignarle un ancho y alto sin que deje de portarse como un elemento en línea */

    width: 1em;
    height: 1em;
    /* Ahora sí,... le asignamos un ancho y alto a la imagen que será importada, que estará siendo tratada como una viñeta, a nuestro gusto. */

    background-image: url(descarga.png);

    /* imagen importada que será tratada como viñeta. */

    background-position: center;
    /* "center" para que quede completamente centrada la viñeta */

    background-size: contain;
    /* Es simplemente necesario */

    background-repeat: no-repeat;
    /* Es simplemente necesario x2 */

    /* Listo, nuestra imagen ha sido o está siendo usada como viñeta con unas dimensiones deseadas pasadas. */

    /* Ahora, ya depende de nosotros pasarle un "padding" u otra variedad de estilos visuales; por ejemplo... */

    padding-right: 1em;
}

/* Ahora, nos interesa suprimir las viñetas que realmente vienen por defecto con los items de la lista (y esto ya se hace dentro del selector padre propio, el selector de la lista que contiene a los items; es decir, en nuestro caso, sobre el selector ".list"). 
*/

.list{
    list-style-type: none;
}
    
/* Ahora, hagamos justamente lo anterior pero sólo con "background" (sin hacer uso del pseudoelemento "::before") */

/* 

.list_item{
    background-image: url(descarga.png);
    background-position: 0 0;
    background-size: contain;
    background-repeat: no-repeat;
    padding-left: 2em;
} 

*/

/* 
Se debe conservar la anterior sentencia también:

.list{
    list-style-type: none;
}

*/

/* Por lo general se recomienda hacer uso del método "background", pues, utiliza menos código; y además, con el "background", podemos usar el short-hand que sería: 

    background: url(descarga.png) 0 0 / contain no-repeat; (bajo el mismo caso que veníamos trabajando)

Respete el orden en que cada tipo de "background" fue colocado dentro de su misma propiedad generica.
*/

/* Entonces, la anterior sentencia sería lo mismo que decir lo siguiente: 

    background-image: url(descarga.png);
    background-position: 0 0;
    background-size: contain;
    background-repeat: no-repeat;

*/
/* 

    3ra propiedad. "list-style-position": Hace que las viñetas se coloquen por dentro o por fuera del elemento. Posibles valores: 

    outside
    inside

    Realmente este recurso no se utiliza nunca (pienso).
*/

/* Ahora, normalmente necesitamos resetear los estilos por defecto de una lista; para lograrlo, declaramos lo siguiente dentro del selector propio a la lista que contiene los items (selector padre), quedaría algo así:

.list{
    margin-top: 0;
    margin-bottom: 0;
    padding-left: 0;

    list-style: none;
}

Siendo más precisos, lo que se consigue es que la lista desaparezca; es decir, que todos los estilos sobre ella desaparezcan.
*/

/* Las listas por lo general se usan para hacer menus; entonces, por lo general siempre se debe declarar en el elemento padre del menu; en este caso, en el selector ".list", lo que recien comentamos: 

.list{
    margin-top: 0;
    margin-bottom: 0;
    padding-left: 0;

    list-style: none;
}
*/

/* La forma más rápida de hacer un menu (sin usar flexbox) sería así: 
*/

.list_item{
    float: left;

    /* Corre los items de la lista por todo el hotizonte y no de forma vertical */

    padding-right: 1em;

    /* Para oxigenar un poco los espacios, dentro de cada item, se le pasa un "padding-right"...
    
    Ahí ya tendríamos los elementos colocados para fabricar un menu.
    
    Lo cierto es que desde que existe "flexbox" & "grid",... se ha desplazado mucho el uso de "float"... ya lo veremos en su momento. */
}