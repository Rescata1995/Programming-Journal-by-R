/* 
    Propiedades para las tablas.

    1. "table-layout": Define como se comportan las dimensiones de una tabla y los anchos de las "columnas". Esta propiedad se debe aplicar sobre la etiqueta de HTML "table", idealmente por medio de una clase pasada. Valores que recibe:

        "automatic": valor por defecto. La columna podría extenderse por todo lo ancho, ante viewports cada vez más anchos, en la medida que haya un mayor contenido (generalmente de tipo textual); es decir, no respeta una medida fija para el ancho de las columnas. Habitualmente esto no es lo que se quiere. 
        
        Lo que generalmente se quiere es que todas las columnas ocupen lo mismo y el espacio se distribuya de forma equitativa; entonces, para lograr eso, tenemos el valor "fixed".

        "fixed": necesita un "width" declarado, el cual se va a re-distribuir sobre el total de columnas registradas; en todo caso, si no se le pasa un ancho (width) a cada columna, éstas se ditribuyen equitativamente. Veamos esto.
    */

    .table{
        table-layout: fixed;
        width: 100%;

        /* Con una medida de "100%" el total de las columnas se exparcerían por todo lo ancho; pues, el porcentaje como medida relativa tomará como referencia la medida de su elemento padre; el cual, es el "div" "table-container" y el ancho de ese "div" es equivalente o se adapta al ancho total del "viewport"; es decir, tiene un "width" de, por ejemplo, 100vh. Quiere decir, entonces, que ".table" también se adaptará a todo el ancho del "viewport" y dividirá ese ancho pasado entre la totalidad de las columnas que tenga,... esa división será de forma equivalente y cada columna ocupará un mismo ancho. */

        text-align: center;
        /* Centra el contenido de cada celda de la tabla */
    }

    /*
    2. "caption-side": Define dónde se coloca el elemento "caption" (título) de una tabla. Esta propiedad se debe aplicar sobre la etiqueta de HTML "table" también, idealmente por medio de una clase pasada. Valores que recibe:

        "top": valor por defecto. Dejaría nuestro título de tabla situado en la parte de arriba de la tabla en cuestión.

        "bottom": Dejaría nuestro título de tabla situado en la parte baja (pie) de la tabla. Veamos esto. */
    
    .table{
        caption-side: bottom;
    }

    /*
    3. "border-spacing": Controla el espacio entre las celdas. Esta propiedad se debe aplicar sobre la etiqueta de HTML "table" también, idealmente por medio de una clase pasada. 

    Recibe una medida en cualquier unidad. Veamos.

    Antes que nada, sepa que las formas de dar bordes a una tabla es con CSS. No lo olvide! De hecho, vamos a darle un borde, con "border", de "1px solid black" a la tabla ".table", a todos los elementos "thead" (las celdas de cabezcera) y a todos los elementos del "tbody" (las celdas del body); esto llamando a sus selectores,... Tal que así (observe la propiedad "border"):
    */

    .table, 
    .table__data, 
    .table__head{
        border: 1px solid black;

        /* Ahora, vamos a definir al "border-spacing", que es como dar un "margin" entre celdas; define cuánto, en términos de espacio, está separada una celda de otra. */
        border-spacing: 20px;
    }

    /*
    4. "border-collapse": Controla si las celdas se mantienen juntas o separadas. Esta propiedad se debe aplicar sobre la etiqueta de HTML "table" también, idealmente por medio de una clase pasada.

        "separate": valor por defecto.

        "collapse": Mantiene junta las celdas. Digamos, les quita el "margin" que da "border-spacing" (anula esta última propiedad). No hay margenes entre celdas, están juntas definitivamente unas a otras. Veamos.
    */

    .table{
        border-collapse: collapse;

        /* De hecho, lo habitual es ver las celdas unidas (aunque por defecto vengan separadas para html) */

        border-collapse: initial;

        /* Aquí hemos definido con "initial" que, preferiblemente, dejemos a la propiedad "border-collapse" con su valor por defecto.
        */
    }

    /*
    5. "empty-cells": Controla qué hacer con las celdas vacías (en efecto tenemos una celda vacia, en nuestro caso, para poder visualizar el alcance de esta propiedad con el valor "hide"). Esta propiedad se debe aplicar sobre la etiqueta de HTML "table" también, idealmente por medio de una clase pasada.

        "show": valor por defecto.

        "hide": Oculta las celdas vacías.

        Importante: para que funcione el valor "hide";es decir, para que se oculte una celda vacia en cuestión, la propiedad "border-collapse" no debe estar definida con el valor "collapse". Veamos.
    */

    .table {
        empty-cells: hide;
    }

    .table__data{
        background: lightblue;

        /* Le hemos pasado intencionalmente estilos a las celdas para que vea que, en caso que una celda esté ocultada con el valor "hide" de la propiedad "empty-cells", los estilos pasados a las celdas no se aplicarán sobre esa celda en cuestión; pues, está ocultada. */
    }

    /* TRUCOS COMUNES PARA HACER UNA TABLA RESPONSIVE (lo que se suele hacer cuando necesitamos que una tabla se adapte a un movil).
    
    En la medida que, por ejemplo, nuestro ancho del viewport se comprima,... llegará un momento en que, por las dimensiones a lo ancho, que son propias a la tabla, se nos generará un scroll sobre todo la pantalla de navegación (lo cual es tedioso para quién navega desde un movil).

    Para solucionar esto, podemos hacer que dicho "scroll" sólo se dé sobre la tabla misma y no sobre toda la pantalla de navegación; entonces, podemos hacer lo siguiente:

    Encerrar toda la tabla en un "div" y asignarle una clase, con la cual, vamos a manipular en términos de estilo dicho "div". El "div" será ".table-container".

    Y, a dicho ".table-container", le vamos a dar un "overflow-x"; es decir, que todo lo que se desborde en "x", que me genere entonces una barra de "scroll" por defecto; sí, que me genere dicha barra de "scroll", pero sólo sobre el mismo selector que esté aplicando dicha propiedad; es decir, sobre ".table-container". Veamos.
    */

    .table-container{
    overflow-x: auto;
    } 

    /* Como ves, sólo aparece una barra de "scroll", pero sólo para la tabla a la que se le asignó la propiedad-valor "overflow-x: auto". Para la pantalla de navegación total, y por lo menos no por esta tabla, no se va a generar un "scroll".
    */

    /* Por último, vamos a darle una medida relativa con porcentajes a la tabla en cuestión, tal que así: */

    .table{
        width: 100%;

        /* Ya debe suponer que significa esto. */
    }