/* 
Flexbox:

    Las propiedades-valor: "display: flex" o "display: inline-flex" permiten que el contenedor pase a ser un contenedor flexible.
    
    La diferencia entre ambas está en cómo queremos que se comporte el contenedor con respeto al resto de elementos que le rodean; es decir, se sabe que ambas propiedades-valor convierten al elemento contenedor en un elemento flexible, eso se entiende; pero, toca definir también, si deseamos que ese contenedor, ahora flexible, asuma caracteristicas de un elemento de línea (con "display: inline-flex") o asuma caracteristicas de un elemento de bloque (con "display: flex").

    Especificamente "display: flex" convierte el contenedor en un contexto para flexbox; es decir, hace que su contenido se vuelva "flexible"; pero, además, hace que el contenedor conserve las propiedades de un elemento de bloque (sin dejar de ser flexibles sus elementos "hijos", directos, contenidos) con relación a los demás elementos que están a su alrededor. Veamos esto con un ejemplo: 
    */

    .flex-container{
        display: flex;

        /* Cuando definimos a nuestro selector ".flex-container", que es un elemento contenedor y padre directo de 5 elementos, con la propiedad-valor: "display: flex",... tenemos que se hará flexible pero también se convertirá en un elemento de bloque (incluso aunque el elemento, originalmente, sea de línea)
        
        Lo que quiere decir que el contenedor ".flex-container" ocupará, entre otras cosas, todo el ancho del "viewport" disponible,... desplazando así, haciá abajo o hacía arriba, a sus elementos contiguos o "vecinos" (Tal como lo hizo con el elemento de la palabra "EJEMPLO")
        */
    }

    /* Ahora, cuando definimos a nuestro selector ".flex-container" con la propiedad-valor: "display: inline-flex", tenemos que,... también se harán flexibles los elementos contenidos por ".flex-container"; pero ahora, dicho elemento contenedor, conservará las propiedades de un elemento de línea o, bien, se convertirá en un elemento de línea (sin dejar de ser flexibles sus elementos "hijos", directos, contenidos) con relación a los demás elementos que están a su alrededor. Veamos.
    */

    .flex-container{
        display: inline-flex;

        /* 
        Con "display: inline-flex" lo que quiere decir que el contenedor ".flex-container" ocupará, entre otras cosas, solamente el ancho necesario para contener a sus elementos hijos, y no todo el "viewport",... Con lo cual no se desplazarían a priori, hacia abajo o hacia arriba, sus elementos contiguos o "vecinos": más bien se "codea" con ellos. (Tal como ahora lo hace con el elemento de la palabra "EJEMPLO") */

        /* Recuerde: "display:inline-flex" convierte el contenedor en un contexto para flexbox y hace que el contenedor sea un elemento en línea para los elementos que lo rodean */

        /* Si necesita recordar a plenitud las propiedades de un elemento de línea y uno de bloque, revise de nuevo los viejos apuntes */
    }

    /* Para agregar: cuando se define un display de "flex" (cualquiera de los dos posibles) se habilita el uso de otras dos propiedades más:
    
        1. flex-direction.
        2. flex-wrap.

        En ese orden, las abordaremos ahora.
        */

    /* -------------------------------------- 

    Ahora vamos a ver cómo modificar las direcciones de las flechas con la propiedad "flex-direction". */

    /*
    Valores disponibles para "flex-direction": 

        1. "row": es el valor por defecto. La dirección de los elementos van de izquierda a derecha; es la dirección, por ejemplo, en la que usted escribe naturalmente (si no es Arabe ni hebreo pues xd). A esta dirección predeterminada en la que se organizan los elementos contenidos por un elemento padre, con contexto para flexbox, se le llama: "main start".
        */

        .flex-container {
            flex-direction: row;
        }

        /* 
        2. Ahora, con "row-reverse", se modificaría la dirección del "main axis"; es decir, pasaría a ser una dirección "main start" a una dirección "main end", lo que significa que,... la dirección de los elementos irían ahora de derecha a izquierda (se invertirián); el último elemento ahora sería el primero y, de paso, la escritura empezaría desde el lado derecho y no desde el lado izquierdo (esto es más notable, visualmente, sobre elementos de bloque con "flexbox"; es decir, con "display: flex").
        */

        .flex-container {
            flex-direction: row-reverse;
        }

        /* 
        3. Ahora, con "column", le decimos al "main axis" que se ubique de forma vertical (como una columna) en vez de que se ubique de forma horizontal; quiere decir entonces que el "cross axis", ahora, se ubicaría de forma horizontal: todo esto sin dejar de respetar el orden en el que se posicionan sus elementos hijos; es decir, el 1er elemento posicionado seguirá situandose de 1ro, el 2do posicionado seguirá estando situado de 2do, y así sucesivamente. Lo único es que ahora, si los elementos hijos estaban por defecto presentados de forma horizontal, estarán presentados de forma vertical. Veamos.
        */

        .flex-container {
            flex-direction: column;
        }

        /*
        4. Por último, con "column-reverse", el "main axis" seguirá ubicandose de forma vertical, tal cual lo hace "column"; sólo que, ahora sí, se invertirá el orden en el que se posicionan sus elementos hijos (exactamente como sucede con "row-reverse" sólo que ahora no estamos frente una fila, sino, frente una columna). 
        */

        .flex-container {
            flex-direction: column-reverse;
        }

        /* En resumen, con la propiedad "flex-direction", podemos reubicar el "main axis" según una dirección y orientación deseada */
    
    /*

    Ahora vamos a hablar de "flex-wrap", sobre cómo controlar el colapsado, desbordado o qué hacer cuando los elementos no quepan, y quiere que sí, con sus medidas originales (así sea le toque "robarse" más espacio del "viewport" que no tenía),... todo esto con la propiedad-valor "flex-wrap: wrap".

    Cuando definimos algún tipo de "flex" a nuestro "display", en algún selector padre contenedor de varios elementos hijos directos,... Si los elementos no caben en el "viewport" con sus medidas originales de ancho y alto, por defecto, tratarán de ajustarse lo más que puedan sobre su mismo "viewport" disponible en cuestión; esto sin importarle mucho, o dejando en segundo plano, las medidas originales en términos de altura y anchura que tienen sus elementos hijos directos contenidos (ahora elementos "flexibles"); de tal manera que, incluso, sus medidas se vean obligadas a ser "comprimidas".

    Por defecto es así como lo contamos; sin embargo, la propiedad de extensión de "flex" que tiene la capacidad de controlar si se respetan o no las medidas, en términos de altura y anchura, pasadas a los elementos hijos directos contenidos es: "flex-wrap".

    "flex-wrap", por defecto, tiene un valor de "no-wrap": es el que fuerza a que los elementos hijos directos quepen sobre un espacio determinado sin importarle las medidas originales, en términos de alto y ancho, que dichos elementos contengan (sin importarle, incluso, que se desborden sobre su propio "viewport" disponible).
    
    flex-wrap: no-wrap (default) 
    
    Ahora, en la otra cara de la moneda,... En caso que desee hacer respetar las medidas, en términos de altura y anchura, pasadas a los elementos hijos directos (incluso aunque le toque "robarse" más espacio del "viewport" que no tenía y hacer un salto de línea inferior),... debe asistirse del valor: "wrap". Así:

    flex-wrap: wrap;
    
    Por último, "wrap-reverse" hace lo mismo que "wrap"; pero, en lugar de hacer que salten los elementos hijos flexibles a la línea inferior, hace que salten a la linea superior (es decir, si parcialmente la totalidad de los elementos hijos directos no caben sobre su "viewport" inicial disponible,... se hará un salto de línea también, pero ahora hacia arriba, para que arriba quepan los elementos que no pudieron caber con el "viewport" inicialmente asignado).
*/

.flex-container {

    /* Para trabajar en esta ocasión con "flex-wrap" nos interesa, primero, dejar un display con valor "flex" y, también, dejar un "flex-direction" con valor "row".
    */

    display: flex;
    flex-direction: row;

    /* ---- */
    
    background-color: #FCA17D;
    padding: .5em 0;

    /* Sin saltos de línea y medidas comprimidas */
    flex-wrap:nowrap;

    /* Con salto de línea para abajo y medidas respetadas */
    flex-wrap: wrap;

    /* Con salto de línea para arriba y medidas respetadas  */

    flex-wrap: wrap-reverse;

    /*  */
}

.flex-item {
    width: 30px;
    height: 30px;
    margin: .5em;
    line-height: 30px;
    color: aliceblue;
    text-align: center;
    background-color: #9A348E;
} 