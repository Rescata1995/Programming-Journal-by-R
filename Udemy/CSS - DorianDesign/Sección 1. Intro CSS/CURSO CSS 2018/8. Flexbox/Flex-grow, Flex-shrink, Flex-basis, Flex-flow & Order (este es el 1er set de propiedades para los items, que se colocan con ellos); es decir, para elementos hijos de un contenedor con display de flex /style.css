/* 
Flexbox
    Propiedad "flex": Es un shorthand que engloba las siguientes propiedades: "flex-grow", "flex-shrink", "flex-basis", "Order".

        Todas las medidas se establecen en función del espacio disponible en el contenedor.

        Todas las propiedadesd de "flex" van en función del MAIN-AXIS.

    flex-grow: Establece qué hacer cuando hay espacio sobrante (entre los "flex-item" y el "flex-container"), cuántas divisiones coge cada elemento. Entonces, lo que queremos establecer es cómo se van a comportar los "flex-item" en función al espacio sobrante que deja el "flex-container". Con "flex-grow" establecemos cuántas divisiones, del espacio sobrante, va a coger uno de los "flex-item" (es decir, al que se le pase la propiedad "flex-grow" en cuestión).

        Análisis del "flex-grow" en contexto: Nuestro "flex-container" ocupa, en términos de anchura, 400px. Tenemos 4 hijos como "flex-item" donde, cada uno, ocupa un ancho de 50px; entonces, dicho eso, tendríamos disponible, como espacio sobrante, 200px (al restar los anchos de cada "flex-item" sobre la anchura total del "flex-container"). De esos 200px sobrantes, con "flex-grow", vamos a decirle cuánto queremos que ocupe cada uno de los "flex-item" (o uno en concreto; pues, recuerde, esta propiedad se aplica es sobre los elementos "flex-item").
        
        El valor es un entero que va desde 0 hasta "n"; o, bien, puede asumir el valor también de "auto". 
            
        Ahora, entienda los valores enteros, definidos en "flex-grow", como si cada uno representará un número de divisiones correspondientes para el "flex-item" manipulado; es decir, supongamos,... tenemos un elemento "flex-item" al que le definimos un "flex-grow" de "2", ¿Esto qué quiere decir? Quiere decir que le vamos a dar a dicho elemento "flex-item", además de sus medidas originales, 2 divisiones más para que ocupe del espacio sobrante del "flex-container". Entonces, en la medida que un "flex-item" tenga un número entero mayor definido en el "flex-grow", éste ocupará más espacio que los demás del espacio sobrante. 

        Ahora, algo que precisar, no necesariamente si usted le coloca a un 1er "flex-item" un "flex-grow" de "1" y, posteriormente, a un 2do "flex-item" le da un "flex-grow" de "2"... No quiera decir eso, entonces, que el 2do "flex-item" va a duplicar en espacio al 1er "flex-item", NO. Realmente estos cálculos los hace el navegador de forma automática, sólo quedese con saber que el 2do "flex-item", sí o sí, será más grande que el 1ro (en este caso hipotetico puntual).

    flex-shrink: Con "flex-shrink" hacemos lo mismo que "flex-grow", pero al revés; es decir, ahora se establece qué hacer cuando no hay espacio suficiente para los "flex-item" en el "flex-container" (justo lo contrario a: "cuando hay espacio sobrante"). Ahora, en esta ocasión, lo que queremos establecer es cómo se van a comportar los "flex-item", por separado, en función al espacio insuficiente que tiene el "flex-container".  Con "flex-shrink" establecemos cuántas divisiones, de sí mismo, va a entregar cada "flex-item"; esto con el motivo de que, ahora sí, puedan caber los "flex-item" en el "flex-container" (al darle esas medidas que se quita cada "flex-item" al "flex-container"). A uno por uno se le puede definir, si desea, cuántas divisiones va a renunciar, de sí, cada "flex-item" (es decir, al que se le pase la propiedad "flex-shrink" en cuestión)

        Análisis del "flex-shrink" en contexto: Continuemos con el ejercicio de suponer que nuestro "flex-container" mide, en términos de anchura, 400px. Sin embargo, ahora, vamos a suponer que los 4 hijos "flex-item", que contiene el "flex-container", miden en términos de anchura, cada uno, 200px... como podrá imaginar, los "flex-item" no caberían en nuestro "flex-container" en ese eventual caso; con todo y eso, CSS es inteligente y, por defecto, les asigna a cada "flex-item" una medida tal, igual para todos, que permite que quepen en el "flex-container"; es decir, cada "flex-item" tendría una anchura de 100px. Lo anterior tiene su explicación técnica: Pasa que el valor por defecto de "flex-shrink", para cada "flex-item", es de "1"; entonces, como consecuencia, a todos los "flex-item" se les dará la misma medida, en términos de anchura, en caso que no quepen en el "flex-container",... al renunciar a un mismo espacio de anchura, de "1", todos los "flex-item".

        Sin embargo, si usted no desea conservar una homogeneidad, en términos de anchura, del espacio al que renuncian todos los "flex-item"; puede asignar para cada "flex-item", por separado, cuántas divisiones renunciar. En la medida que el "flex-shrink" sea de un número entero mayor, sobre un "flex-item", mayor será la renuncia de su espacio en cuestión.

        Recuerde, el valor es un entero que va desde 0 hasta "n"; o, bien, puede asumir el valor también de "auto". 
        
        

    flex-basis: Establece cuanto tiene que ocupar el item antes de encojer o extenderse. Flex basis prevalece ante width si el main-axis es horizontal o ante height si el main-axis es vertical. El valor es un entero desde 0 hasta n.

    Los valores de flex son:
        Por defecto es 0 1 auto
        flex:auto; equivale a 1 1 auto;
        flex:none; equivale a  0 0 auto;
        flex: flex-grow(obligatiorio) flex-shrink(opcional) flex-basis(opcional);

    Order: Establece qué orden ocupará el elemento en el contenedor flex. El valor es el "peso" respecto a los valores que tengan los otros elementos. Por defecto es 0.
    
    Extra:
        Existe un shorthand para flex-direction y flex-wrap. flex-flow: flex-direction flex-wrap. flex-flow: column wrap;
*/

.flex-container {
    background-color: #FCA17D;
    height: 300px;
    width: 400px;
    display: flex;
}

.flex-item {
    display: flex;
    align-items: center;
    justify-content: center;

    /* Width para evaluar: "flex-grow": */
    /* width: 50px; */

    /* Width para evaluar: "flex-shrink": */
    width: 200px;

    height: 50px;
    color: aliceblue;
    background-color: #9A348E;
}

.flex-item:nth-child(2) {
    background: lightseagreen;
    /* flex-grow: 1; */
    flex-shrink: 2;
}

.flex-item:nth-child(3) {
    background: lightskyblue;
    /* flex-grow: 2; */
    flex-shrink: 3;
}

.flex-item:first-child {
    background: darkgoldenrod;
    order: 2;
} 